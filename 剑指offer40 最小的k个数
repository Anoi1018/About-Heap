输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。

 示例 ：
输入：arr = [3,2,1], k = 2
输出：[1,2] 或者 [2,1]

限制：
0 <= k <= arr.length <= 10000
0 <= arr[i] <= 10000

代码示意：
一、JS API 排序输出前k个元素
时间复杂度：O(nlogn)
空间复杂度：O(logn)

注意：
在 V8 引擎 7.0 版本之前，数组长度小于10时， Array.prototype.sort() 使用的是插入排序，否则用快速排序。

在 V8 引擎 7.0 版本之后就舍弃了快速排序，因为它不是稳定的排序算法，在最坏情况下，时间复杂度会降级到 O(n2)。
而是采用了一种混合排序的算法：TimSort 。
这种功能算法最初用于Python语言中，严格地说它不属于以上10种排序算法中的任何一种，属于一种混合排序算法：
在数据量小的子数组中使用插入排序，然后再使用归并排序将有序的子数组进行合并排序，时间复杂度为 O(nlogn)

var getLeastNumbers = function(arr, k) {
    return arr.sort((a,b)=>a-b).slice(0,k);
};

二、大顶堆
构建一个size为k的大顶堆 并且不断维护 从而堆内元素对应的就是原数组中最小的 k 个数

时间复杂度：遍历数组需要 O(n) 的时间复杂度，一次堆化需要 O(logk) 时间复杂度，所以利用堆求 Top k 问题的时间复杂度为 O(nlogk)
空间复杂度：O(k)

优势：在一个动态数组中求 Top k 元素

var buildBigHeap = function(arr){  //构建大顶堆函数 
      for(let i=Math.floor(arr.length/2);i>=0;i--){ 
          siftDown(arr,i,arr.length); //除去叶子节点 剩余的一半节点自下而上的找到应该在的位置 从而构建好堆
      }
}
var siftDown = function(arr,index,len){ //siftdown表示将当前节点堆化 进行的是 下沉操作
    let element = index;  //element 表示的是最大元素的下标 初始化为index
    let left = 2*index+1;
    let right = 2*index +2;  //确定需要堆化元素的左右节点
    if(left<len && arr[left] > arr[element]) element = left;
    if(right<len && arr[right]>arr[element]) element = right; //左右节点存在 替换element保证其存放最大值下标
    if(element!==index){ //当前index节点不是最大值  两者交换保证index最大 然后递归element现在存放的新节点
        [arr[element],arr[index]] = [arr[index],arr[element]];
        siftDown(arr,element,len);
    }

}
var getLeastNumbers = function(arr, k) {
    if(!arr || arr.length<=k) return arr;
    let bigHeap = [],i=0;
    while(i<k){
        bigHeap.push(arr[i++]);
    }
    buildBigHeap(bigHeap); //1.将数组构造为大顶堆
    while(i<arr.length){
        if(arr[i]<bigHeap[0]){ //2.维护存有k个最小元素的大顶堆
            bigHeap[0] = arr[i];
            siftDown(bigHeap,0,k); //3.替换堆顶元素后 从堆顶开始 堆化操作
        }
        i++;
    }
    return bigHeap;
};
三、快排
时间复杂度：O（nlogn）
空间复杂度：O（nlogn）
1、直接使用快排排序整个数组再输出前k个数
var partition = function(arr,left,right){
    let i = left, j = right, aid =arr[Math.floor((left+right)/2)];
    while(i<=j){
        while(arr[i]<aid) i++;
        while(arr[j]>aid) j--;
        if(i<=j){
            [arr[i],arr[j]] = [arr[j],arr[i]]; //这里的快排相当于调整一次原数组 
            i++;j--; 
        }
    }
    return i;
}

var quickSort = function(arr,left,right){
    let index ;
    if(arr.length>1){
        index= partition(arr,left,right);
        if(left<index-1) quickSort(arr,left,index-1);
        if(index<right) quickSort(arr,index,right);   //index也参与排序
    }
    
    return arr;
}
var getLeastNumbers = function(arr, k) {
    if(!arr || arr.length<=k) return arr;
    
    arr = quickSort(arr,0,arr.length-1);
    
    return arr.slice(0,k);
};
2、优化后的快排(快速选择) --》我们只需要保证前k个数是最小的 并不需要对整个数组进行排序
时间复杂度O（n）最坏O（n^2）
空间复杂度：O（1）
function partition (arr,left,right) {
    let pivot = arr[left];
    while(left<right){
        while(left<right && arr[right]>=pivot) right--;
        arr[left] = arr[right];
        while(left<right && arr[left]<pivot) left++;
        arr[right] = arr[left];
    }
    arr[left] = pivot;  //-》注意此处的不同 这里相当于挖坑填数 改变了原数组元素 上面的快排实现不是 pivot不参与下一次排序
    return left;
}

var getLeastNumbers = function(arr, k) {
    if(!arr || arr.length<=k) return arr;
    
    let left = 0,right=arr.length-1;
    let index= partition(arr,left,right);
    while(index!==k){
        if(index<k){
            left = index+1; //递归时 不包括index
            index = partition(arr,left,right);
        }else if(index>k){
            right = index-1;
            index = partition(arr,left,right)
        }
    } 
    return arr.slice(0,k);
};

四、计数排序 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。它是一种典型的拿空间换时间的排序算法
时间复杂度：O(n + m)，其中 m 表示数据范围  遍历一遍原数组O（n）--n数组长度  + 遍历一遍计数数组（辅助结构-分布式排序）O（m） 所以O（m+n）
空间复杂度：O(m)
var getLeastNumbers = function(arr, k) {
    if(!arr || arr.length<=k) return arr;
    let counts = new Array(10001);
    arr.forEach((element)=>{
        if(!counts[element]){
            counts[element] = 0;
        }
        counts[element]++;
    });
    let sortedIndex = 0;
    for(let i=0;i<counts.length;i++){
        while(counts[i]-->0 && sortedIndex<k){
            arr[sortedIndex++] = i;
        }
        if(sortedIndex === k) break;
    }
    return arr.slice(0,k);
};


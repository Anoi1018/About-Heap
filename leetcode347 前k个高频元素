给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

示例 1:
输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]

示例 2:
输入: nums = [1], k = 1
输出: [1]

提示：
你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
你的算法的时间复杂度必须优于 O(nlogn) , n 是数组的大小。
题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。
你可以按任意顺序返回答案。

代码展示：
一、map+重构sort
1 遍历一遍数组 用map记录 元素：出现次数
2 将map对象转化为数组 则数组作为线性数据结构可以使用sort（）函数
3 重写sort函数 传入a b 表示两个键值对  a[0] b[0] --键/元素  a[1] b[1]--值/元素出现次数  (a,b)=>b[1]-a[1] 实现了按value逆序将键值对排好序
4 输出前k个键值对中的键 mapArr[j][0]
var topKFrequent = function(nums, k) {
    if(!nums || nums.length<=k) return nums;
    let len = nums.length,map = new Map();
    for(let i=0;i<len;i++){
        if(map.has(nums[i])){
            map.set(nums[i],map.get(nums[i])+1);
        }else {
            map.set(nums[i],1);
        }
    }
    let mapArr = Array.from(map);
    mapArr.sort((a,b)=>b[1]-a[1]);
    let ans=[];
    for(let j=0;j<k;j++){
        ans.push(mapArr[j][0]);
    }
    return ans;
};

